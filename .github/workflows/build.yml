name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run vet
        run: go vet ./...

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          # For Windows, add .exe extension
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="koneksi-backup-${{ matrix.os }}-${{ matrix.arch }}.exe"
          else
            OUTPUT="koneksi-backup-${{ matrix.os }}-${{ matrix.arch }}"
          fi
          
          # Build with SQLite support
          if [ "${{ matrix.os }}" = "linux" ]; then
            # Use static linking for Linux to include SQLite
            go build -ldflags="-s -w -linkmode external -extldflags '-static'" -o ${OUTPUT} ./cmd/koneksi-backup
          else
            go build -ldflags="-s -w" -o ${OUTPUT} ./cmd/koneksi-backup
          fi

      - name: Compress binary
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip koneksi-backup-${{ matrix.os }}-${{ matrix.arch }}.zip koneksi-backup-${{ matrix.os }}-${{ matrix.arch }}.exe
          else
            tar -czf koneksi-backup-${{ matrix.os }}-${{ matrix.arch }}.tar.gz koneksi-backup-${{ matrix.os }}-${{ matrix.arch }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            *.zip
            *.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            # Koneksi Backup CLI Release
            
            ## Installation
            
            Download the appropriate binary for your platform:
            - **Linux AMD64**: `koneksi-backup-linux-amd64.tar.gz`
            - **Linux ARM64**: `koneksi-backup-linux-arm64.tar.gz`
            - **Windows AMD64**: `koneksi-backup-windows-amd64.zip`
            - **Windows ARM64**: `koneksi-backup-windows-arm64.zip`
            - **macOS AMD64**: `koneksi-backup-darwin-amd64.tar.gz`
            - **macOS ARM64**: `koneksi-backup-darwin-arm64.tar.gz`
            
            Extract and run:
            ```bash
            # Linux/macOS
            tar -xzf koneksi-backup-*.tar.gz
            chmod +x koneksi-backup-*
            ./koneksi-backup-* init
            
            # Windows
            # Extract the zip file and run koneksi-backup-*.exe init
            ```

      - name: Upload Release Assets
        run: |
          for file in ./artifacts/*; do
            asset_name=$(basename "$file")
            echo "Uploading $asset_name"
            
            # Determine content type
            if [[ $asset_name == *.zip ]]; then
              content_type="application/zip"
            else
              content_type="application/gzip"
            fi
            
            # Upload asset
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $content_type" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$asset_name"
          done